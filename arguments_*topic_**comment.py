'''Коли ми оголошуємо параметр з зірочкою (наприклад *topics), всі позиційні аргументи, 
починаючи з цієї позиції до кінця, будуть зібрані в кортеж під ім'ям topics. 
Це незмінна структура зберігання даних і кількість елементів у ній також можна обчислити функцією len() .'''

def make_article(title, *topics):
    print(topics)


make_article("Title", "first", "second", "third")  # ('first', 'second', 'third')


'''Водночас, коли ми оголошуємо параметри з двома зірочками **comments, всі ключові аргументи, 
починаючи з цієї позиції та до кінця, будуть зібрані в словник під ім'ям comments.'''

def make_article(title, **comments):
    print(comments)


make_article("Title", comment_one="first", comment_two="second", comment_third="third")
# {'comment_one': 'first', 'comment_two': 'second', 'comment_third': 'third'}

'''Створіть дві функції:

1) перша first буде мати першим параметром змінну size, а також вона може приймати будь-яку кількість позиційних аргументів. 
Функція повинна повернути суму size із загальною кількістю переданих до неї позиційних аргументів.
2) друга функція second так само матиме першим параметром size і прийматиме довільну кількість ключових аргументів,
 і також має повернути суму size з кількістю переданих у функцію ключових аргументів.'''
# Перша функція `first` приймає змінну `size` та довільну кількість позиційних аргументів і повертає суму `size` і кількості переданих позиційних аргументів.
def first(size, *args):
    return size + len(args)

# Друга функція `second` приймає змінну `size` та довільну кількість ключових аргументів і повертає суму `size` і кількості переданих у функцію ключових аргументів.
def second(size, **kwargs):
    return size + len(kwargs)

# Приклади використання функцій:
result_1 = first(10, 2, 3, 4)
print(result_1)  # Виведе: 13 (10 + 3 (кількість позиційних аргументів))

result_2 = second(5, a=1, b=2, c=3)
print(result_2)  # Виведе: 8 (5 + 3 (кількість ключових аргументів))