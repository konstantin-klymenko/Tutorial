'''Коли ми оголошуємо параметр з зірочкою (наприклад *topics), всі позиційні аргументи, 
починаючи з цієї позиції до кінця, будуть зібрані в кортеж під ім'ям topics. 
Це незмінна структура зберігання даних і кількість елементів у ній також можна обчислити функцією len() .'''

def make_article(title, *topics):
    print(topics)


make_article("Title", "first", "second", "third")  # ('first', 'second', 'third')


'''Водночас, коли ми оголошуємо параметри з двома зірочками **comments, всі ключові аргументи, 
починаючи з цієї позиції та до кінця, будуть зібрані в словник під ім'ям comments.'''

def make_article(title, **comments):
    print(comments)


make_article("Title", comment_one="first", comment_two="second", comment_third="third")
# {'comment_one': 'first', 'comment_two': 'second', 'comment_third': 'third'}

'''Створіть дві функції:

1) перша first буде мати першим параметром змінну size, а також вона може приймати будь-яку кількість позиційних аргументів. 
Функція повинна повернути суму size із загальною кількістю переданих до неї позиційних аргументів.
2) друга функція second так само матиме першим параметром size і прийматиме довільну кількість ключових аргументів,
 і також має повернути суму size з кількістю переданих у функцію ключових аргументів.'''
# Перша функція `first` приймає змінну `size` та довільну кількість позиційних аргументів і повертає суму `size` і кількості переданих позиційних аргументів.
def first(size, *args):
    return size + len(args)

# Друга функція `second` приймає змінну `size` та довільну кількість ключових аргументів і повертає суму `size` і кількості переданих у функцію ключових аргументів.
def second(size, **kwargs):
    return size + len(kwargs)

# Приклади використання функцій:
result_1 = first(10, 2, 3, 4)
print(result_1)  # Виведе: 13 (10 + 3 (кількість позиційних аргументів))

result_2 = second(5, a=1, b=2, c=3)
print(result_2)  # Виведе: 8 (5 + 3 (кількість ключових аргументів))

'''Якщо нам потрібні аргументи, що передаються лише по ключу, 
але не потрібен параметр з зірочкою, то при оголошенні функції можна вказати просто зірочку з підкресленням, 
без вказування імені:'''
def modeling(factor, *_, correction):
    pass



def cost_delivery(quantity, *_, **kwargs):
    '''
Онлайн-магазин "У Бобра" надає послугу експрес доставлення своїх товарів 
за ціною 5¤ за перший товар у замовленні та 2¤ - за всі наступні товари.

Необхідно реалізувати функцію, яка приймає як перший параметр кількість товарів у замовленні quantity, 
але також має бути присутнім параметр, що передається тільки за ключем discount.
Параметр discount за замовчуванням має значення 0 - знижки немає. 
Приймає значення від 0 до 1. Функція cost_delivery повертає загальну суму за доставлення товару з урахуванням знижки.
Треба передбачити, що функція cost_delivery при визові може приймати будь-яку кількість позиційних аргументів.'''
    discount = kwargs.get('discount', 0)  # Отримуємо значення параметра discount, за замовчуванням 0
    if discount < 0 or discount > 1:
        raise ValueError("Discount must be between 0 and 1")

    # Розраховуємо вартість доставки з урахуванням знижки
    first_item_cost = 5  # Вартість першого товару
    additional_item_cost = 2  # Вартість наступних товарів

    if quantity <= 0:
        return 0

    total_cost = first_item_cost + (quantity  - 1) * additional_item_cost

    # Застосовуємо знижку
    total_cost *= (1 - discount)

    return total_cost

result_1 = cost_delivery(2, 3, 4, 5)  # Без знижки, 3 товари
print(result_1)

result_2 = cost_delivery(4, discount=0.1)  # Зі знижкою 10%, 4 товари
print(result_2)  # Виведе: 12.6 (5 + 3*2) * (1 - 0.1) = 12.6

print (cost_delivery.__doc__)